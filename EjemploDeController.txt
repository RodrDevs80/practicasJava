@RestController
@RequestMapping("/topicos")
public class TopicoController {

    private TopicoRepository topicoRepository;

    public TopicoController(TopicoRepository topicoRepository) {
        this.topicoRepository = topicoRepository;
    }
    @PostMapping
    @Transactional
    public ResponseEntity<DatosRespuestaTopico> registoTopico
            (@RequestBody @Valid DatosRegistroTopico datosRegistro){
        Topico topico = topicoRepository.save(new Topico(datosRegistro));

        DatosRespuestaTopico datosRespuestaTopico = new DatosRespuestaTopico(topico.getId(), topico.getTitulo(),
                topico.getMensajeTopico(), topico.getAutorTopico(), topico.getCursoDelTopico(), topico.getStatus().toString(),
                new DatosRespuesta(topico.getRespuestas().getRespuestaMensaje(),
                        topico.getRespuestas().getAutorMensajeRespuesta(), topico.getRespuestas().getSolucion()));

       URI url=ServletUriComponentsBuilder.fromCurrentRequest()
                .path("/{id}").buildAndExpand(datosRespuestaTopico.getId()).toUri();

        return ResponseEntity.created(url).body(datosRespuestaTopico);
    }
    @GetMapping
    @Transactional
    public ResponseEntity<Page<DatosListadoTopicos>> listarTopicos(@PageableDefault(size = 12) Pageable paginacion){
        return ResponseEntity.ok(topicoRepository.findByActivoTrue(paginacion).map(DatosListadoTopicos::new)); 
    //en DatosListadoTopicos debe crearce un contructor con los datos a mostrarse y el medtodo
    //findByActivoTrue(paginacion) debe devolver una Page<Topicos> en este caso
    }
    @GetMapping("/{id}")
    public ResponseEntity<DatosRespuestaTopico> buscarTopicoPorId(@PathVariable Long id){

        Topico topico = topicoRepository.getReferenceById(id);
        DatosRespuestaTopico datosRespuestaTopico = new DatosRespuestaTopico(topico.getId(), topico.getTitulo(),
                topico.getMensajeTopico(), topico.getAutorTopico(), topico.getCursoDelTopico(), topico.getStatus().toString(),
                new DatosRespuesta(topico.getRespuestas().getRespuestaMensaje(),
                        topico.getRespuestas().getAutorMensajeRespuesta(), topico.getRespuestas().getSolucion()));
        return ResponseEntity.ok(datosRespuestaTopico);
    }

    @DeleteMapping("eliminarDeBaseDeDatos/{id}")
    public void eliminarTopicosDeBaseDeDatos(@PathVariable Long id){
        Topico topico = topicoRepository.getReferenceById(id);
        topicoRepository.delete(topico);
    }
    //Eliminacion Logica
    @DeleteMapping("/{id}")
    @Transactional
    public ResponseEntity eliminarLogicamenteTopicos(@PathVariable Long id){
        Topico topico = topicoRepository.getReferenceById(id);
        topico.desactivarTopico();
        return ResponseEntity.noContent().build();
    }
    @PutMapping
    @Transactional
    public ResponseEntity<DatosRespuestaTopico> actualizarTopicos(@RequestBody @Valid DatosActualizarTopicos topicoActualizar ){
        Topico topico = topicoRepository.getReferenceById(topicoActualizar.id());
        topico.actulizarTopico(topicoActualizar);
        DatosRespuestaTopico datosRespuestaTopico = new DatosRespuestaTopico(topico.getId(), topico.getTitulo(),
                topico.getMensajeTopico(), topico.getAutorTopico(), topico.getCursoDelTopico(),topico.getStatus().toString(),
                new DatosRespuesta(topico.getRespuestas().getRespuestaMensaje(),
                        topico.getRespuestas().getAutorMensajeRespuesta(), topico.getRespuestas().getSolucion()));
        return ResponseEntity.ok(datosRespuestaTopico);
    }
}


//ejemplo de record para listar en api rest
public record ResponseCourses(Long id, String title, Float price) {
    public ResponseCourses(Course course){
        this(course.getId(), course.getTitle(), course.getPrice());
    }
}


 URI url= ServletUriComponentsBuilder.fromCurrentRequest()
                .path("/{id}").buildAndExpand(course.getId()).toUri();